#!/bin/bash
###############################################################################
#                                                                             #
# prelim_enum,1.1a                                                            #
# by Scott Link (ath0)                                                        #
# I make no warranties or accept liability if you use this.                   #
# Copyright 2019                                                              #
# Released under Creative Commons (CC0) licensing.                            #
#                                                                             #
# 1.1a: Fixed version number, fixed nikto syntax                              #
# 1.2: Nikto blows. Added port check for smb, added full nmap at end.         #
# 1.3: dirbuster in headless mode, test for open http ports                   #
#                                                                             #
###############################################################################
	# Pass comma separated list of IP address to script for enumeration.
	# NO SPACES! E.g., prelim_enum 10.1.1.1,10.1.1.2,10.1.1.3

	# TODO
	#  - get mail
	# Modify to use ffuf instead of gobuster (make an option?)

###############################################################################
#                                                                             #
# FUNCTION: enum_net                                                          #
#                                                                             #
###############################################################################
enum_net () {
		printf "Getting tftp/snmp info..."
        printf " (-sC will get OID entries, if string is public)\n"
		nmap -oA ${h}/${h}_initial_udp -sV -sC -sU -p 69,161,162 \
            -Pn ${h} 2>&1>/dev/null
		printf "Running initial nmap...\n"
		nmap -oA ${h}/${h}_initial -sV -sC -Pn ${h} 2>&1>/dev/null
		printf "Getting the sploits...\n"
		searchsploit --nmap ${h}/${h}_initial.xml > ${h}/${h}.sploits
		
		# Let's get the articles...
		if [ ! -d ${h}/sploitdir ] ; then
			printf "I'm making the sploitdir...\n"
			mkdir ${h}/sploitdir 2>/dev/null
			if [ ${?} -ne 0 ] ; then
				printf "Fail in creating sploitdir!\n"
				printf "Exiting..."
				exit
			fi
		fi
	
		list=$(awk -F/ '{print $NF}' ${h}/${h}.sploits \
            | grep -v "\-\-\-\-\-"  | grep -v Shellcodes | grep -v Papers \
            | grep -v "^$" | grep -v 'Exploit' | grep -v ")" | grep -v "xml" \
			| awk -F. '{print $1}')
		cd ${h}/sploitdir/
	
		printf "Time to get the articles...\n"

		for i in ${list} ; do
			searchsploit -m ${i} 2>&1>/dev/null
		done

		cd ..;cd ..
}

###############################################################################
#                                                                             #
# FUNCTION: enum_smb                                                          #
#                                                                             #
###############################################################################
enum_smb () {
	grep "open" ${h}/${h}_initial.gnmap | grep -w "139" 2>&1>/dev/null
	tst139=$?

	unset portlist

	if [ ${tst139} -eq 1 ] ; then
		printf "Port 139 not open...\n"
	else
		portlist=139
	fi

	grep "open" ${h}/${h}_initial.gnmap | grep -w "445" 2>&1>/dev/null
	tst445=$?

	if [ ${tst445} -eq 1 ] ; then
		printf "Port 445 not open...\n"
	elif [ -z "${portlist}" ] ; then
		portlist=445
	else
		portlist=139,445
	fi

	if [ ${tst139} -eq 1 -a ${tst445} -eq 1 ] ; then
		printf "SMB Enum bypassed, 139 and 445 not open.\n"
		return
	fi

	printf "Looking for SMB RCE vulns...\n"
	scripts="cve2009-3103 cve-2017-7494 ms06-025 ms07-029 ms07-029 \
        ms08-067 ms10-054 ms10-061 ms17-010"
	#portlist="139,445"
	
	for s in ${scripts} ; do 
		printf "Executing on ${s}\n"
		sleep 10
		nmap -v -p ${portlist} -oA ${h}/${s}.out -T4 --script=smb-vuln-${s} \
            ${h} 2>&1>/dev/null
	done
	
	enum4linux ${h} > ${h}/enum4linux.out
}

###############################################################################
#                                                                             #
# FUNCTION: enum_web                                                          #
#                                                                             #
###############################################################################
enum_web () {
	portlist="80,8000,8080,443,8443"
	nmap -v -p ${portlist} -oA ${h}/${h}_http_test.out -T4 ${h}
	
	# Process gnmap file and kick off gobuster scan
	results=$(grep Ports ${h}/${h}_http_test.out.gnmap | awk -F: '{print $3}' \
		| sed 's/ //g')

    if [ -z ${results} ] ; then
        printf "None of the usual suspects open...(80, 8000, 8080, 443, 8443)\n"
        return
    fi
	
	for r in $(echo ${results} | sed 's/,/ /g') ; do
		testme=$(echo ${r} | awk -F/ '{print $2}')
		portnum=$(echo ${r} | awk -F/ '{print $1}')
	
		if [ ${testme} = open -a ${portnum} = 80 ] ; then
			printf "Scanning ${h} on port ${portnum}...\n"
			curl -o ${h}/${h}.${portnum}.index.html http://${h}:${portnum}
			gobuster dir -u http://${h}:${portnum} -r \
				-w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt \
				-x php,txt -t 100 -l > ${h}/${h}-gobuster
		elif [ ${testme} = open -a ${portnum} = 8000 ] ; then
			printf "Scanning ${h} on port ${portnum}...\n"
			curl -o ${h}/${h}.${portnum}.index.html http://${h}:${portnum}
			gobuster dir -u http://${h}:${portnum} -r \
				-w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt \
				-x php,txt -t 100 -l > ${h}/${h}-gobuster
		elif [ ${testme} = open -a ${portnum} = 8080 ] ; then
			printf "Scanning ${h} on port ${portnum}...\n"
			curl -o ${h}/${h}.${portnum}.index.html http://${h}:${portnum}
			gobuster dir -u http://${h}:${portnum} -r \
				-w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt \
				-x php,txt -t 100 -l > ${h}/${h}-gobuster
		elif [ ${testme} = open -a ${portnum} = 443 ] ; then
			printf "Scanning ${h} on port ${portnum}...\n"
			curl -ssl -o ${h}/${h}.${portnum}.index.html https://${h}:${portnum}
			gobuster dir -k -u https://${h}:${portnum} -r \
				-w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt \
				-x php,txt -t 100 -l > ${h}/${h}-gobuster
		elif [ ${testme} = open -a ${portnum} = 8443 ] ; then
			printf "Scanning ${h} on port ${portnum}...\n"
			curl -ssl -o ${h}/${h}.${portnum}.index.html https://${h}:${portnum}
			gobuster dir -k -u https://${h}:${portnum} -r \
				-w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt \
				-x php,txt -t 100 -l > ${h}/${h}-gobuster
		fi
			
	done
	
	printf "Done!\n"
}	

###############################################################################
#                                                                             #
# FUNCTION: make_dir                                                          #
#                                                                             #
###############################################################################
make_dir () {
	if [ ! -d ${h} ] ; then
		mkdir ${h} 2>/dev/null
	fi
}

###############################################################################
#                                                                             #
# FUNCTION: test_input                                                        #
#                                                                             #
###############################################################################
test_input () {

	if [ ! -n "${1}" ] ; then
		printf "You need pass comma separated list of IPs. Exiting...\n"
		exit
	fi

	if [ -n "${2}" ] ; then
		printf "You have passed too many parameters.\n"
		printf "You need pass comma separated list of IPs. Exiting...\n"
		exit
	fi

	iplist=$1
}

###############################################################################
#                                                                             #
# Main                                                                        #
#                                                                             #
###############################################################################

test_input $1

for h in $(echo ${iplist} | sed 's/,/ /g') ; do
	printf "I'm operating on ${h}\n"
	printf "Timing tests...\n"
	printf "Running make_dir...\n"
	time make_dir 
	printf "Running enum_net...\n"
	time enum_net
	printf "Running enum_smb...\n"
	time enum_smb
	printf "Running enum_web...\n"
	time enum_web
	printf "Prelims done for ${h}\n"
done

printf "Starting full nmap scans.\n"
for h in $(echo ${iplist} | sed 's/,/ /g') ; do
	printf "Working on ${h}\n"
	nmap -oA ${h}/${h}_full -Pn -p- ${h} 2>&1>/dev/null
done
